import ioPlus;

SymbolTable {

    .method public method1(a.i32, b.i32).i32 {

        t1.i32 :=.i32 $1.a.i32 +.i32 $2.b.i32;

        ret.i32 t1.i32;

    }

    .method public static main(args.array.String).V {

        b.i32 :=.i32 2.i32;

        b.i32 :=.i32 b.i32 +.i32 1.i32;

        a.SymbolTable :=.SymbolTable new(SymbolTable).SymbolTable;
        invokespecial(a.SymbolTable, "<init>").V;

        t3.i32 :=.i32 b.i32 -.i32 1.i32;
        t4.i32 :=.i32 invokevirtual(a.SymbolTable, "method1", 1.i32, t3.i32).i32;
        t5.i32 :=.i32 t4.i32 *.i32 5.i32;
        result.i32 :=.i32 t5.i32 -.i32 2.i32;

        invokestatic(ioPlus, "printResult", result.i32).V;

        ret.V;

    }

    .construct SymbolTable().V {
        invokespecial(this, "<init>").V;
    }
}